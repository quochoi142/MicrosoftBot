<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <meta charset="utf-8">
  <title>{{name}}</title>
  <style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
      height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    #description {
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
    }

    #infowindow-content .title {
      font-weight: bold;
    }

    #infowindow-content {
      display: none;
    }

    #map #infowindow-content {
      display: inline;
    }

    .pac-card {
      margin: 10px 10px 0 0;
      border-radius: 2px 0 0 2px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      outline: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      background-color: #fff;
      font-family: Roboto;
    }

    #pac-container {
      padding-bottom: 12px;
      margin-right: 12px;
    }

    .pac-controls {
      display: inline-block;
      padding: 5px 11px;
    }

    .pac-controls label {
      font-family: Roboto;
      font-size: 13px;
      font-weight: 300;
    }

    #pac-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 12px;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 100%;
    }

    #pac-input:focus {
      border-color: #4d90fe;
    }

    #title {
      color: #fff;
      background-color: #4d90fe;
      font-size: 25px;
      font-weight: 500;
      padding: 6px 12px;
    }

    #target {
      width: 345px;
    }
  </style>
</head>

<body>

  <input id="pac-input" class="controls" type="text" placeholder="Tìm kiếm">

  <div id="map"></div>

  <script src="https://www.gstatic.com/firebasejs/7.14.1/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/7.14.1/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/7.14.1/firebase-database.js"></script>
  <script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.

    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">


    var marker, map;
    var mylocation;
    var myAddress;

    function initAutocomplete() {
      mylocation = { lat: 11.363017, lng: 107.526468 }
      map = new google.maps.Map(document.getElementById('map'), {
        center: mylocation,
        zoom: 16,
        mapTypeId: 'roadmap',
        // disableDefaultUI: true,
        //disableDoubleClickZoom: true,
        streetViewControl: false,
        fullscreenControl: false,
        mapTypeControl: false,


      });

      var mapOptions = {
        styles: [
          {
            featureType: "transit.station.bus",
            stylers: [
              { visibility: "off" }
            ]
          }
        ]
      };
      map.setOptions(mapOptions);

      marker = new google.maps.Marker({

        position: mylocation
      });
      var infowindow = new google.maps.InfoWindow();


      addYourLocationButton(infowindow);

      getCurrentPosition(infowindow);
      addDoneButton();

      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);
      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function () {
        searchBox.setBounds(map.getBounds());
      });



      map.addListener('click', function (event) {

        //alert(JSON.stringify(event))

        if (marker) {
          marker.setMap(null);
        }
        const latLng = event.latLng
        marker = new google.maps.Marker({
          map: map,
          animation: google.maps.Animation.DROP,
          position: latLng
        });
        //map.panTo(latLng);
        mylocation = latLng;
        //map.setCenter(latLng);
        showAddress(latLng, infowindow)
        //marker.setMap(null);
      });
      // var markers = [];
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function () {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }

        // Clear out the old markers.
        // markers.forEach(function (marker) {
        //   marker.setMap(null);
        // });
        // markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function (place) {
          if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
          }

          if (marker) {
            marker.setMap(null);
          }
          marker = new google.maps.Marker({
            map: map,
            animation: google.maps.Animation.DROP,
            position: place.geometry.location
          })
          infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
            place.formatted_address + '</div>');
          myAddress = place.formatted_address;
          infowindow.open(map, marker);
          mylocation = place.geometry.location;
          map.setZoom(16);
          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });
    }

    function addYourLocationButton(infowindow) {
      var controlDiv = document.createElement('div');

      var firstChild = document.createElement('button');
      firstChild.style.backgroundColor = '#fff';
      firstChild.style.border = 'none';
      firstChild.style.outline = 'none';
      firstChild.style.width = '28px';
      firstChild.style.height = '28px';
      firstChild.style.borderRadius = '2px';
      firstChild.style.boxShadow = '0 1px 4px rgba(0,0,0,0.3)';
      firstChild.style.cursor = 'pointer';
      firstChild.style.marginRight = '10px';
      firstChild.style.padding = '0px';
      firstChild.title = 'Your Location';
      controlDiv.appendChild(firstChild);

      var secondChild = document.createElement('div');
      secondChild.style.margin = '5px';
      secondChild.style.width = '18px';
      secondChild.style.height = '18px';
      secondChild.style.backgroundImage = 'url(https://maps.gstatic.com/tactile/mylocation/mylocation-sprite-1x.png)';
      secondChild.style.backgroundSize = '180px 18px';
      secondChild.style.backgroundPosition = '0px 0px';
      secondChild.style.backgroundRepeat = 'no-repeat';
      secondChild.id = 'you_location_img';
      firstChild.appendChild(secondChild);

      /* google.maps.event.addListener(map, 'dragend', function () {
        $('#you_location_img').css('background-position', '0px 0px');
      }); */

      firstChild.addEventListener('click', function () {
        var imgX = '0';
        var animationInterval = setInterval(function () {
          if (imgX == '-18') imgX = '0';
          else imgX = '-18';
          $('#you_location_img').css('background-position', imgX + 'px 0px');
        }, 500);
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            if (!marker) {
              marker = new google.maps.Marker({
                animation: google.maps.Animation.DROP,
                position: latlng,
                map: map
              });
            } else {
              marker.setPosition(latlng);
              marker.setMap(map);
            }
            //map.setCenter(latlng);
            showAddress(latlng, infowindow);
            mylocation = latlng;
            clearInterval(animationInterval);
            $('#you_location_img').css('background-position', '-144px 0px');
          });
        }
        else {
          clearInterval(animationInterval);
          $('#you_location_img').css('background-position', '0px 0px');
        }
      });

      controlDiv.index = 1;
      map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(controlDiv);
    }


    function addDoneButton() {
      var controlDiv = document.createElement('div');

      var firstChild = document.createElement('button');
      firstChild.style.backgroundColor = '#fff';
      firstChild.style.border = 'none';
      firstChild.style.outline = 'none';
      firstChild.style.width = '100px';
      firstChild.style.height = '30px';
      firstChild.style.borderRadius = '2px';
      firstChild.style.boxShadow = '0 1px 4px rgba(0,0,0,0.3)';
      firstChild.style.cursor = 'pointer';
      firstChild.style.marginRight = '10px';
      firstChild.style.marginLeft = '10px';
      firstChild.style.padding = '0px';
      firstChild.title = 'Xác nhận';
      var text = document.createTextNode("Xác nhận");
      firstChild.appendChild(text);
      controlDiv.appendChild(firstChild);


      initFireBase();

      firstChild.addEventListener('click', function () {
        const id = '{{id}}';
        const token = '{{token}}';

        firebase.database().ref('users/' + id + '/token').once('value', snap => {
          if (snap.val() === token) {
            const x = JSON.stringify(mylocation);
            const y = JSON.parse(x);
            firebase.database().ref('users/' + id + '/location').set(y.lat + '|' + y.lng + '|' + myAddress);
          }
        });
        alert("Đã nhận vị trí, vui lòng quay lại chờ tin nhắn")


      });

      controlDiv.index = 1;
      map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(controlDiv);
    }

    function getCurrentPosition(infowindow) {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
          var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          if (!marker) {
            marker = new google.maps.Marker({
              animation: google.maps.Animation.DROP,
              position: latlng,
              map: map
            });
          } else {
            marker.setPosition(latlng);
            marker.setMap(map);
          }

          // map.setCenter(latlng);
          mylocation = latlng;
          showAddress(latlng, infowindow);
        });
      }
    }

    function showAddress(LatLng, infowindow) {
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({
        'location': LatLng
      }, function (results, status) {
        if (status ==
          google.maps.GeocoderStatus.OK) {
          if (results[0]) {
            // alert(results[1].formatted_address);
            const place = results[0];
            infowindow.setContent('<div>' +
              place.formatted_address + '</div>');
            infowindow.open(map, marker);
            myAddress = place.formatted_address;
          }
        }
      });
    }

    function initFireBase() {
      const firebaseConfig = {
        apiKey: "AIzaSyBDVEejsbGSQW8pxMIT22ZxkJUg859LKRo",
        authDomain: "botbus-a0a7e.firebaseapp.com",
        databaseURL: "https://botbus-a0a7e.firebaseio.com",
        projectId: "botbus-a0a7e",
        storageBucket: "botbus-a0a7e.appspot.com",
        messagingSenderId: "380831720444",
        appId: "1:380831720444:web:9604e3824585138816c879",
        measurementId: "G-26WE7HBV9G"
      };
      firebase.initializeApp(firebaseConfig);

    }


  </script>
  <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBuTd5eFJwpova9M3AGpPrSwmzp_hHWVuE&libraries=places&callback=initAutocomplete&language=vi"
    async defer></script>




</body>

</html>